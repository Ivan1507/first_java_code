import java.util.*;


class Mandelbrot {

    static int BAILOUT = 16; // Данная переменная помогает определить вхождение точки в определённый диапазон

    static int MAX_ITERATIONS = 100000; // Точность определения границ множества (Сколько раз выполняется цикл)


/*Здесь начинается работа с формулами по множеству Мандельброта. В общем виде рекуррентное соотношение выглядит как Z(n+1)=Z(n)^2+C,
где n+1 и n - это порядковые номера Z, натуральные числа, а Z и C - комплексные числа вида R+I*i, где R - координата по ОХ, I - координата по ОУ, а i - мнимая единица.
По условию Z(0) = 0, следовательно, а все следующие Z рассчитываются по формулам zr = x(n+1) = x(n)^2 - y(n)^2 + x(0); zi = y(n+1) = 2*x(n)*y(n) + y(0),
где х(0) = cr, y(0) = ci. Также условием того, что С ясвляется подходящим числом, является вхождение координат этого числа в следующий диапазон:
х принадлежит (-2,2), у принадлежит (-2,2). Так как модуль комплексного числа есть его расстояние от начала координат, то из ограничения диапазона следует,
что модуль числа С не может превышать 4, а квадрат этого расстояния, соответственно не может превышать 16. Именно на основе этих условий, рассуждений и ограничений
реализован iterate */


    private static int iterate(float x, float y) {

        float cr = y - 0.5f;

        float ci = x;

        float zi = 0.0f;

        float zr = 0.0f;

        int i = 0;

        while (true) {

            i++;

            float temp = zr * zi;

            float zr2 = zr * zr;

            float zi2 = zi * zi;

            zr = zr2 - zi2 + cr;

            zi = temp + temp + ci;

            if (zi2 + zr2 > BAILOUT)

                return i; // В случае выполнения условия (zi2 + zr2 > BAILOUT) С не является подходящим числом, программа отмечает это значением i, а в последствии выводит пробел

            if (i > MAX_ITERATIONS)

                return 0; // Аналогично объяснению из предыдущего комментария, в этом случае С считается подходящим, а программа в последствии выводит Звёздочку

        }

    }


    public static void main(String args[]) {

        Date d1 = new Date(); // программа начинает узнавать звёздочка или пробел

        int x, y;

        for (y = -39; y < 39; y++) {
            //Подобные значения для у и для х определены исходя из размеров квадрата presize = 80
            System.out.print("\n");

            for (x = -40; x < 40; x++) {

                if (iterate(x / 40.0f, y / 40.0f) == 0)

                    System.out.print("*");
//находим здесь d2 для звезды

                else

                    System.out.print(" ");


//находим здесь d2 для пробела


            }

        }

//Начало нахождения d2
        Date d2 = new Date(); // Время окончания построения звёздчек и пробелов

        long diff = d2.getTime() - d1.getTime(); // время за которое программа работала

        System.out.println("\nJava Elapsed " + diff / 1000.0f); // Вывод времени (diff) (делим на 1000 и переводим тем самым из миллисекунд в секунды)
    }
}

//конец нахождения d



